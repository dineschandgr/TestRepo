- Readability
- Adherence to best practices
- Extensibility (what if we wanted to add an other source later, or a different database?)
- Exception handling



1. Naming Convention and all classes follow SRP (Single Responsibility Principle)
2. TDD
3. Test Controller end point, Service and Repo
4. Test Utility class
5. H2 DB for testing
6. Mysql DB for application
7. RestControllerAdvice for exception handling
8. Hibernate ORM to switch DB
9. API available for any source
10. Docker file for containerizing for horizontal scaling

Decisions 

1. Initially i wanted to hardcode the system path of the CSV and process it but i have assumed that my solution would be used for uploading multiple files dynamically. Hence i have designed it as an API to be used by the client. 

3. I was thinking about processing only the unique records but it might cause ambiguity to the client. So if any duplicate record exists, none of the records would be processed

4. The CSV has more columns than the database table but i am only processing what is required by the DB

5. I am using separate DB for application (MySQL) and Tests (H2)

6. This solution follows TDD approach where the test cases were written first and made to fail. Then the actual logic was written and the test cases were execute to pass

7. Test cases have been written and executed to test the controller end point, service, utility and the repository 

8. I am following Domain Driver Design (DDD) where every class name, method name and the class variables follow the business domain

9. Every class in this project follows SRP(Single Responsibility Principle). Example ExceptionHandling is done by a separate class and it only does that work

10. Hibernate ORM tool is used for persistence. In future, we can easily switch to any database provider with minimal configuration

Assumptions

8. I am assuming that the file size is not more than 100 MB. If the file size is more, client needs to split the file into multiple file or we need to do batch processing asynchronously using Spring Batch. This ensures better throughput with low latency.

11. Docker file is included in this solution and i am assuming that this application runs inside docker containers. This will make the application highly scalable and fault tolerant.

2. I have assumed that my end points are secured using OAuth2 / Open ID Connect frameworks.
